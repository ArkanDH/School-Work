if(row == MATRIX_SIZE - 1) {
        maze[row][col] = 2;
        return 1;
    }
    int adjRow;
    int adjCol;
    int dir = 0; /* Checks upward first */
    adjacentCell(row, col, dir, &adjRow, &adjCol);
    if(isOK(adjRow, adjCol) && maze[adjRow][adjCol] != 2) {
        maze[row][col] = 2;
        return solveMazeRec(adjRow, adjCol);
    }
    dir = turnRight(dir);
    adjacentCell(row, col, dir, &adjRow, &adjCol);
    if(isOK(adjRow, adjCol) && maze[adjRow][adjCol] != 2) {
        maze[row][col] = 2;
        return solveMazeRec(adjRow, adjCol);
    }
    dir = turnRight(dir);
    adjacentCell(row, col, dir, &adjRow, &adjCol);
    if(isOK(adjRow, adjCol) && maze[adjRow][adjCol] != 2) {
        maze[row][col] = 2;
        return solveMazeRec(adjRow, adjCol);
    }
    dir = turnRight(dir);
    adjacentCell(row, col, dir, &adjRow, &adjCol);
    if(isOK(adjRow, adjCol) && maze[adjRow][adjCol] != 2) {
        maze[row][col] = 2;
        return solveMazeRec(adjRow, adjCol);
    }
    dir = turnRight(dir);
    adjacentCell(row, col, dir, &adjRow, &adjCol);
    if(maze[adjRow][adjCol] == 2) {
        maze[row][col] = 1;
        maze[adjRow][adjCol] = 0;
        return solveMazeRec(adjRow, adjCol);
    }
    dir = turnRight(dir);
    adjacentCell(row, col, dir, &adjRow, &adjCol);
    if(maze[adjRow][adjCol] == 2) {
        maze[row][col] = 1;
        maze[adjRow][adjCol] = 0;
        return solveMazeRec(adjRow, adjCol);
    }
    dir = turnRight(dir);
    adjacentCell(row, col, dir, &adjRow, &adjCol);
    if(maze[adjRow][adjCol] == 2) {
        maze[row][col] = 1;
        maze[adjRow][adjCol] = 0;
        return solveMazeRec(adjRow, adjCol);
    }
    dir = turnRight(dir);
    adjacentCell(row, col, dir, &adjRow, &adjCol);
    if(maze[adjRow][adjCol] == 2) {
        maze[row][col] = 1;
        maze[adjRow][adjCol] = 0;
        return solveMazeRec(adjRow, adjCol);
    }
    return 0;